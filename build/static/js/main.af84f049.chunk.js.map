{"version":3,"sources":["components/Home.tsx","containers/Login.tsx","actions/AuthActions.tsx","containers/Logout.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Home","withRouter","connect","state","auth","dispatch","login","token","dispath","type","payload","props","content","isAuthenticated","to","pathname","App","role","className","exact","path","component","Login","Logout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQAQeA,MANf,WACI,OACI,6BAAK,4C,OCCb,IAgCeC,cAAWC,aAdF,SAACC,GACrB,MAAO,CACHC,KAAMD,EAAMC,SAIO,SAACC,GACxB,MAAO,CACHC,MAAO,SAACC,GACJF,EChCL,SAAeE,GAClB,OAAO,SAACC,GACJA,EAAQ,CACJC,KAAM,QACNC,QAASH,KD4BAD,CAAMC,QAKDL,EAhCZ,SAACS,GAeX,MAAQ,CAACC,QAdKD,EAAMP,KAAKS,gBAEjB,6BACI,kBAAC,IAAD,CAAUC,GAAI,CACVC,SAAU,QAKlB,6BACI,kDEFhB,IAced,cAAWC,aAdF,SAACC,GACrB,MAAO,CACHC,KAAMD,EAAMC,SAIO,SAACC,GACxB,MAAO,CACHC,MAAO,SAACC,GACJF,GDbD,SAACG,GACJA,EAAQ,CACJC,KAAM,SACNC,QAAQ,YCeMR,EAvB1B,WAEI,OACI,6BAAK,kBAAC,IAAD,CAAUY,GAAI,CACfC,SAAU,YCaPC,MAdf,WACE,OACI,6BACE,0BAAMC,KAAK,OAAOC,UAAU,aAC1B,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,IACjC,kBAAC,IAAD,CAAOoB,KAAK,SAASC,UAAWC,IAChC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWE,QCHzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af84f049.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div><h1>#Stay home</h1></div>\r\n    );\r\n};\r\n\r\nexport default Home","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router';\r\nimport {login} from '../actions/AuthActions';\r\n\r\nconst Login = (props : any) => {\r\n    let content = props.auth.isAuthenticated ?\r\n        (\r\n            <div>\r\n                <Redirect to={{\r\n                    pathname: '/'\r\n                }} />\r\n            </div>\r\n        ) :\r\n        (\r\n            <div>\r\n                <h1>Login pagina</h1>\r\n            </div>\r\n        );\r\n\r\n    return ({content});\r\n};\r\n\r\nconst mapStateToProps = (state : any) => {\r\n    return {\r\n        auth: state.auth\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch : any) => {\r\n    return {\r\n        login: (token :any) => {\r\n            dispatch(login(token));\r\n        }\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Login));","export function login(token : any) {\r\n    return (dispath: any) => {\r\n        dispath({\r\n            type: 'LOGIN',\r\n            payload: token\r\n        });\r\n    }\r\n}\r\n\r\nexport function logout() {\r\n    return (dispath: any) => {\r\n        dispath({\r\n            type: 'LOGOUT',\r\n            payload: ``\r\n        });\r\n    };\r\n}","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter, Redirect } from 'react-router';\r\nimport {logout} from '../actions/AuthActions';\r\n\r\nfunction Logout (this : any) {\r\n\r\n    return (\r\n        <div><Redirect to={{\r\n            pathname: '/'\r\n        }}/></div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state : any) => {\r\n    return {\r\n        auth: state.auth\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch : any) => {\r\n    return {\r\n        login: (token :any) => {\r\n            dispatch(logout());\r\n        }\r\n    }\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Logout));","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {Route, Switch} from \"react-router\";\r\nimport Home from \"./components/Home\";\r\nimport Login from \"./containers/Login\";\r\nimport Logout from \"./containers/Logout\";\r\n\r\nfunction App() {\r\n  return (\r\n      <div>\r\n        <main role=\"main\" className=\"container\">\r\n          <Switch>\r\n            <Route exact path='/' component={Home} />\r\n            <Route path='/login' component={Login} />\r\n            <Route path='/logout' component={Logout} />\r\n          </Switch>\r\n        </main>\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}